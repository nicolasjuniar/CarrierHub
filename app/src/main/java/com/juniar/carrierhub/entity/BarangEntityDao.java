package com.juniar.carrierhub.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "book".
*/
public class BarangEntityDao extends AbstractDao<BarangEntity, Long> {

    public static final String TABLENAME = "book";

    /**
     * Properties of entity BarangEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nama = new Property(1, String.class, "nama", false, "name");
        public final static Property Jumlah = new Property(2, int.class, "jumlah", false, "jumlah");
        public final static Property Pemasok = new Property(3, String.class, "pemasok", false, "pemasok");
        public final static Property Tanggal = new Property(4, String.class, "tanggal", false, "tanggal");
    }


    public BarangEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BarangEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"book\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: nama
                "\"jumlah\" INTEGER NOT NULL ," + // 2: jumlah
                "\"pemasok\" TEXT," + // 3: pemasok
                "\"tanggal\" TEXT);"); // 4: tanggal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"book\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BarangEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nama = entity.getNama();
        if (nama != null) {
            stmt.bindString(2, nama);
        }
        stmt.bindLong(3, entity.getJumlah());
 
        String pemasok = entity.getPemasok();
        if (pemasok != null) {
            stmt.bindString(4, pemasok);
        }
 
        String tanggal = entity.getTanggal();
        if (tanggal != null) {
            stmt.bindString(5, tanggal);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BarangEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nama = entity.getNama();
        if (nama != null) {
            stmt.bindString(2, nama);
        }
        stmt.bindLong(3, entity.getJumlah());
 
        String pemasok = entity.getPemasok();
        if (pemasok != null) {
            stmt.bindString(4, pemasok);
        }
 
        String tanggal = entity.getTanggal();
        if (tanggal != null) {
            stmt.bindString(5, tanggal);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BarangEntity readEntity(Cursor cursor, int offset) {
        BarangEntity entity = new BarangEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nama
            cursor.getInt(offset + 2), // jumlah
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pemasok
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // tanggal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BarangEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNama(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJumlah(cursor.getInt(offset + 2));
        entity.setPemasok(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTanggal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BarangEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BarangEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BarangEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
